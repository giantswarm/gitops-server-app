giantswarm:
  images:
    server:
      image: giantswarm/weaveworks-wego-app
      pullPolicy: IfNotPresent
      tag: v0.18.0
    test:
      image: giantswarm/busybox
      pullPolicy: IfNotPresent
      tag: 1.36.0
  resources:
    vpa:
      enabled: true
    server:
      limits:
        cpu: 200m
        memory: 256Mi
      requests:
        cpu: 100m
        memory: 128Mi
    test:
      requests:
        cpu: 10m
        memory: 2Mi
      limits:
        cpu: 10m
        memory: 4Mi
  rbac:
    create: true
    impersonation:
      users:
        enabled: true
        # -- If non-empty, this limits the users names that the service account
        # can impersonate, e.g. `['user1@corporation.com', 'user2@corporation.com']`
        resourceNames: []
      groups:
        enabled: true
        # -- If non-empty, this limits the groups names that the service account
        # can impersonate, e.g. `['admins', 'operations', 'devops']`
        resourceNames: []
    # -- If non-empty, this limits the secrets that can be accessed by
    # the service account to the specified ones, e.g. `['weave-gitops-enterprise-credentials']`
    viewSecretsResourceNames: ["cluster-user-auth", "oidc-auth"]
    # -- If non-empty, these additional rules will be appended to the RBAC role and the cluster role.
    # for example,
    # additionalRules:
    # - apiGroups: ["infra.contrib.fluxcd.io"]
    #   resources: ["terraforms"]
    #   verbs: [ "get", "list", "patch" ]
    additionalRules: []

replicaCount: 1
image:
  registry: gsoci.azurecr.io
imagePullSecrets: []
nameOverride: ""
fullnameOverride: ""
# -- What log level to output. Valid levels are 'debug', 'info', 'warn' and 'error'
logLevel: info
# Additional arguments to pass in
# additionalArgs:
# Any other environment variables:
envVars:
  - name: WEAVE_GITOPS_FEATURE_TENANCY
    value: "true"
  - name: WEAVE_GITOPS_FEATURE_CLUSTER
    value: "false"
# -- Annotations to add to the deployment
annotations: {}
# Should the 'oidc-auth' secret be created. For a detailed
# explanation of these attributes please see our documentation:
# https://docs.gitops.weave.works/docs/configuration/securing-access-to-the-dashboard/#login-via-an-oidc-provider
oidcSecret:
  create: false
  # clientID:
  # clientSecret:
  # issuerURL:
  # redirectURL:
serviceAccount:
  # -- Specifies whether a service account should be created
  create: true
  # -- Annotations to add to the service account
  annotations: {}
  # -- The name of the service account to use.
  # If not set and create is true, a name is generated using the fullname template
  name: ""
adminUser:
  # -- Whether the local admin user should be created.
  # If you use this make sure you add it to `giantswarm.rbac.impersonation.users.resourceNames`.
  create: false
  # -- Specifies whether the clusterRole & binding to the admin user should be created.
  # Will be created only if `adminUser.create` is enabled. Without this,
  # the adminUser will only be able to see resources in the target namespace.
  createClusterRole: true
  # -- Whether we should create the secret for the local
  # adminUser. Will be created only if `adminUser.create` is
  # enabled. Without this, we'll still set up the roles and
  # permissions, but the secret with username and password has to be
  # provided separately.
  createSecret: true
  # -- Set username for local admin user, this should match the value in the secret `cluster-user-auth`
  # which can be created with `adminUser.createSecret`. Requires `adminUser.create`.
  username: gitops-test-user
  # -- (string) Set the password for local admin user. Requires `adminUser.create` and `adminUser.createSecret`
  # This needs to have been hashed using bcrypt.
  # You can do this via our CLI with `gitops get bcrypt-hash`.
  passwordHash: ""
podAnnotations: {}
podLabels: {}
# aadpodidbinding: identity
podSecurityContext: {}
# fsGroup: 2000

securityContext:
  runAsNonRoot: true
  allowPrivilegeEscalation: false
  capabilities:
    drop:
      - ALL
  seccompProfile:
    type: RuntimeDefault
  runAsUser: 1000
  readOnlyRootFilesystem: true
service:
  create: true
  type: ClusterIP
  port: 9001
  # nodePort:
  annotations: {}
ingress:
  enabled: false
  className: ""
  annotations: {}
  # kubernetes.io/ingress.class: nginx
  # kubernetes.io/tls-acme: "true"
  hosts: []
  # - host: chart-example.local
  #   paths:
  #     - path: /
  #       pathType: ImplementationSpecific
  #
  tls: []
  #  - secretName: chart-example-tls
  #    hosts:
  #      - chart-example.local
extraVolumes: []
extraVolumeMounts: []
# Example using extraVolumes and extraVolumeMounts to load 'oidc-auth' secret
# with a secrets store CSI driver. Specify the secretName 'oidc-auth' in the
# secretProviderClass so this will be created by the secrets store CSI driver.
# See https://secrets-store-csi-driver.sigs.k8s.io/topics/sync-as-kubernetes-secret.html
# extraVolumeMounts:
#   - name: ww-gitops-oauth-volume
#     mountPath: /mnt/secrets
#     readOnly: true
# extraVolumes:
#   - name: ww-gitops-oauth-volume
#     csi:
#       driver: secrets-store.csi.k8s.io
#       readOnly: true
#       volumeAttributes:
#         secretProviderClass: ww-gitops-oauth-provider

networkPolicy:
  # -- Specifies whether default network policies should be created.
  create: true
nodeSelector: {}
tolerations: []
affinity: {}
serverTLS:
  # -- Enable TLS termination in gitops itself. If you enable this,
  # you need to create a secret, and specify the secretName. Another
  # option is to create an ingress.
  enable: false
  # -- Specify the tls secret name. This type of secrets have a key called `tls.crt` and `tls.key` containing their corresponding values in  base64 format.
  # See
  # https://kubernetes.io/docs/concepts/configuration/secret/#tls-secrets for more details and examples
  secretName: "my-secret-tls"
  # Example of tls secret
  #
  #  apiVersion: v1
  #  kind: Secret
  #  metadata:
  #    name: my-secret-tls
  #  type: kubernetes.io/tls
  #  data:
  #    # the data is abbreviated in this example
  #    tls.crt: |
  #      MIIC2DCCAcCgAwIBAgIBATANBgkqh ...
  #    tls.key: |
  #      MIIEpgIBAAKCAQEA7yn3bRHQ5FHMQ ...
  #
  # You can also create a tls secre t from files whith this k8s command:
  # kubectl create secret tls my-tls-secret \
  #  --cert=path/to/cert/file \
  #  --key=path/to/key/file
metrics:
  # -- Start the metrics exporter
  enabled: false
  service:
    # -- Port to start the metrics exporter on
    port: 2112
    # -- Annotations to set on the service
    annotations:
      prometheus.io/scrape: "true"
      prometheus.io/path: "/metrics"
      prometheus.io/port: "{{ .Values.metrics.service.port }}"
